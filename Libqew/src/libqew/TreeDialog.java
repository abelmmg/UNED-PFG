/*
 * 2022 - Abel Matas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package libqew;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * Clase Dialogo de tipo árbol
 * @author Abel Matas
 */
public class TreeDialog extends Dialog {

    private ArrayList<Component> components = new ArrayList<>();
    private DefaultMutableTreeNode root;
    
    /**
     * Constructor de un TreeDialog vacio.
     */
    public TreeDialog() {
        super();
        if (this.getName()==null) this.setName("TreeDialog" + DialogType.nextValue(DialogType.TREE));
        
        CardLayout layout = new CardLayout();
        super.setLayout(layout);
        initComponents();
        
        tree.setVisibleRowCount(0);
        tree.setRootVisible(true);
    }
    
    /**
     * Constructor de TreeDialog con un componente.
     * @param component Componente que se agrega.
     */
    public TreeDialog(Component component) {
        this();
        addComponent(component);
    }    
    
    /**
     * Crea las raiz del arbol Tree
     * @param rootName Nombre de la raiz
     */
    public void createRootTreeNode(String rootName) {
        root = new DefaultMutableTreeNode(rootName);
        tree.setModel(new javax.swing.tree.DefaultTreeModel(root));
        jScrollPaneArbol.setViewportView(tree);
    }
    
    /**
     * Agrega un nodo a la raiz
     * @param nodeName Nombre del nodo.
     */
    public void addNodeToRoot(String nodeName) {
        // Crea el nodo
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName);
        // Se agrega a la raiz.
        root.add(node);
        
        // Refresca el arbol
        DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
        model.reload(root);
    }
    
    /**
     * Agrega un nodo al árbol
     * @param nodeName Nombre del nodo
     * @param tn DefaultMutableTreeNode donde agregar el nuevo nodo
     */
    public void addNode(String nodeName, DefaultMutableTreeNode tn) {
        // Crea el nodo
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName);
        // Lo agrega al DefaultMutableTreeNode
        tn.add(node);
        root.add(tn);
        
        // Refresca el arbol
        DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
        model.reload(root);
    }
    
    private boolean isFirstVisible = false;
    /**
    * Método del interface InterfaceDialog
    * Agrega un componte al diálogo.
    * @param component Componente a agregar
    */
    @Override
    public void addComponent(Component component) {
        //TODO SEGURO ???? se pinta mal ??? add(component);
        setName(component.getName());
        component.setVisible(false);
        components.add(component);
        
        // El primer componente agregado se utiliza para ser visible
        if (component instanceof Dialog && components.size() > 0 && !isFirstVisible) {
            ((JPanel)components.get(components.size()-1)).setVisible(true);
            jScrollPanel.setViewportView(components.get(components.size()-1));
            pack();
            isFirstVisible = true;
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPanel = new javax.swing.JSplitPane();
        jScrollPanel = new javax.swing.JScrollPane();
        jScrollPaneArbol = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jSplitPanel.setBorder(null);
        jSplitPanel.setDividerSize(2);

        jScrollPanel.setBorder(null);
        jScrollPanel.setName(""); // NOI18N
        jSplitPanel.setRightComponent(jScrollPanel);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        jScrollPaneArbol.setViewportView(tree);

        jSplitPanel.setLeftComponent(jScrollPaneArbol);

        add(jSplitPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Se dispara cuando se selecciona un nodo del árbol,
     * y se activa la ventana asociada al nodo.
     * La ventana tiene el mismo nombre que el nodo.
     * @param evt TreeSelectionEvent
     */
    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        //System.out.println(evt.getPath().toString());
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        System.out.println("Selected Node: " + selectedNode.getUserObject().toString());
       
        for (Component componente : components) {     
            String componentName = componente.getName();
            if (componentName!=null) {
                if (componentName.equals(selectedNode.getUserObject().toString())) {
                    System.out.println("Component Name: " + componentName);
                    jScrollPanel.setViewportView(componente);
                    
                    ((JPanel)componente).setVisible(true);
                    pack();
                }
            }
        }
    }//GEN-LAST:event_treeValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPaneArbol;
    public javax.swing.JScrollPane jScrollPanel;
    private javax.swing.JSplitPane jSplitPanel;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    /**
     * Retorna todos los componentes de TreeDialog.
     * @return Array de componentes.
     */
    @Override
    public Component[] getComponents() {
        Component[] ret;
        ret = components.toArray(Component[]::new);
        return ret;
    }  
    
}
