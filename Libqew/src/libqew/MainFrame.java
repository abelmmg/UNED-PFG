/*
 * 2022 - Abel Matas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package libqew;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;

/**
 * Ventana prinicipal que contiene a los dialogos 
 * y los botones de aceptar y cancelar 
 * @author Abel Matas
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    private InterfaceDialog dialog;
    private ValidatorListener dialogValidator;
    
    /**
     * Crea un frame vacio con los botones de Aceptar y Cancelar.
     */
    public MainFrame() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        buttonsPanel.addActionListener(this);
    }
    
    /**
     * Asigna el dialog principal del frame.
     * @param dialog 
     */
    public void setDialog(InterfaceDialog dialog) {
        this.dialog = dialog;
        getContentPane().add(((JPanel)dialog), java.awt.BorderLayout.CENTER);
        
        //TODO: Ver como sera?
//        // Sizing por defecto del frame.
//        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
//        int height = pantalla.height;
//        int width = pantalla.width;
//        setSize(width-100, height-100);
        
        // Colocación central del frame en la pantalla.
        setLocationRelativeTo(null);
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new libqew.ButtonsPanel();

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private libqew.ButtonsPanel buttonsPanel;
    // End of variables declaration//GEN-END:variables
    
    private boolean validation = true;
    /**
     * Función recursiva que valida cada Dialogo.
     * @param parent Conenetor padre donde buscar Dialogos.
     * @return Devuelve true si todos los dialgos son validados.
     */
    private boolean isValidated(Container parent)
    {
        for (Component c : parent.getComponents())
        {
            if (c instanceof Dialog) {
                
                if (c instanceof ValidatorListener) {
                    if ( !((ValidatorListener) c).validateThis() ) {
                        validation = false;
                        return validation;
                    };
                }
            }

            if (c instanceof Component) 
                isValidated((Container)c);
        }
        return validation;
    }
    
    /**
     * Función recursia que guarda los Dialogos
     * segun el codido del método saveThis().
     * @param parent Contenedor padre donde buscar Dialogos.
     */
    private void saveAll(Container parent)
    {
        for (Component c : parent.getComponents())
        {
            if (c instanceof Dialog) {
                
                if (c instanceof ValidatorListener) {
                    ((ValidatorListener) c).saveThis();
                }
            }

            if (c instanceof Component) 
                saveAll((Container)c);
        }
    }
    
    /**
     * Función recursia que limipia los Dialogos
     * segun el codido del método cleanThis().
     * @param parent Contenedor padre donde buscar Dialogos.
     */
    private void cleanAll(Container parent)
    {
        for (Component c : parent.getComponents())
        {
            if (c instanceof Dialog) {
                
                if (c instanceof ValidatorListener) {
                    ((ValidatorListener) c).cleanThis();
                }
            }

            if (c instanceof Component) 
                saveAll((Container)c);
        }
    }
   
    /**
     * Método que se dispara al pulsar el botón Aceptar o Cancelar.
     * @param e ActionEvent generado.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("Botón pulsado: " + e.getActionCommand());
	if(e.getActionCommand().equals("Aceptar")) {
            
            // Se verifica si todos los dialagos estan valiadados.
            if (isValidated(this)) {
                if (dialogValidator != null) {
                    if ( dialogValidator.validateThis() ) {                        
                        saveAll(this);
                        cleanAll(this);
                        this.dispose();
                    };
                }  
            } else {System.out.println("ERROR de Validación.");}
        }
	else if(e.getActionCommand().equals("Cancelar")) {
            cleanAll(this);
            this.dispose();
	}
    }
    
    /**
     * Permiter agregar un ValidatorListener al MainFrame.
     * @param dialogValidator Código con interface ValidatorListerner a agregar.
     */
    public void addValidatorListener(ValidatorListener dialogValidator) {
        this.dialogValidator = dialogValidator;
    }
    
    /**
     * Método para indicar que un componente observan a otro componente.
     * @param listenerComponent Componente que observa
     * @param listenedComponent Componente observado.
     */
    public void addListernerComponents(Component listenerComponent, Component listenedComponent) {
        ListenersManager.getInstance().addListerner(listenerComponent, listenedComponent);
    }
    
}
